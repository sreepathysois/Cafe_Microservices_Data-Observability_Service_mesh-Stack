

########## Jager Install##################


Sockshop Repo

jaeger Deployment File: 

#
# Copyright 2017 The Jaeger Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.
#

apiVersion: v1
kind: List
items:
- apiVersion: v1
  kind: Namespace
  metadata:
      name: jaeger
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: jaeger-deployment
    namespace: jaeger
    labels:
      app: jaeger
      jaeger-infra: jaeger-deployment
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: jaeger
        jaeger-infra: jaeger-pod
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: jaeger
          jaeger-infra: jaeger-pod
      spec:
          containers:
          -   env:
              - name: COLLECTOR_ZIPKIN_HOST_PORT
                value: ":9411"
              image: jaegertracing/all-in-one
              name: jaeger
              ports:
                - containerPort: 5775
                  protocol: UDP
                - containerPort: 6831
                  protocol: UDP
                - containerPort: 6832
                  protocol: UDP
                - containerPort: 16686
                  protocol: TCP
                - containerPort: 9411
                  protocol: TCP
              readinessProbe:
                httpGet:
                  path: "/"
                  port: 16686
                initialDelaySeconds: 5
- apiVersion: v1
  kind: Service
  metadata:
    name: jaeger-query
    namespace: jaeger
    labels:
      app: jaeger
      jaeger-infra: jaeger-service
  spec:
    ports:
      - name: query-http
        port: 80
        protocol: TCP
        targetPort: 16686
    selector:
      jaeger-infra: jaeger-pod
    type: LoadBalancer
- apiVersion: v1
  kind: Service
  metadata:
    name: jaeger-collector
    namespace: jaeger
    labels:
      app: jaeger
      jaeger-infra: collector-service
  spec:
    ports:
    - name: jaeger-collector-tchannel
      port: 14267
      protocol: TCP
      targetPort: 14267
    - name: jaeger-collector-http
      port: 14268
      protocol: TCP
      targetPort: 14268
    - name: jaeger-collector-zipkin
      port: 9411
      protocol: TCP
      targetPort: 9411
    selector:
      jaeger-infra: jaeger-pod
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    name: jaeger-agent
    namespace: jaeger
    labels:
      app: jaeger
      jaeger-infra: agent-service
  spec:
    ports:
    - name: agent-zipkin-thrift
      port: 5775
      protocol: UDP
      targetPort: 5775
    - name: agent-compact
      port: 6831
      protocol: UDP
      targetPort: 6831
    - name: agent-binary
      port: 6832
      protocol: UDP
      targetPort: 6832
    clusterIP: None
    selector:
      jaeger-infra: jaeger-pod
- apiVersion: v1
  kind: Service
  metadata:
    name: zipkin
    namespace: jaeger
    labels:
      app: jaeger
      jaeger-infra: zipkin-service
  spec:
    ports:
    - name: jaeger-collector-zipkin
      port: 9411
      protocol: TCP
      targetPort: 9411
    clusterIP: None
    selector:
      jaeger-infra: jaeger-pod 



Kubectl apply -f jaeger-deploy.yaml 


###### Open Telementry Collector Setup#################


otel-values.yaml


mode: deployment

fullnameOverride: otel-collector

image:
  repository: otel/opentelemetry-collector-contrib
  tag: 0.128.0
  pullPolicy: IfNotPresent

config:
  extensions:
    health_check:
      endpoint: "0.0.0.0:13133"

  receivers:
    otlp:
      protocols:
        grpc: {}
        http: {}

  processors:
    batch: {}

  exporters:
    otlp/jaeger:
      endpoint: jaeger-collector.jaeger.svc.cluster.local:4317
      tls:
        insecure: true
    debug:
      verbosity: detailed

  service:
    extensions: [health_check]
    pipelines:
      traces:
        receivers: [otlp]
        processors: [batch]
        exporters: [otlp/jaeger, debug]
      metrics:
        receivers: [otlp]
        processors: [batch]
        exporters: [debug]
      logs:
        receivers: [otlp]
        processors: [batch]
        exporters: [debug]

service:
  type: ClusterIP

ports:
  otlp:
    enabled: true
    containerPort: 4317
    servicePort: 4317

  otlp-http:
    enabled: true
    containerPort: 4318
    servicePort: 4318

  health:
    enabled: true
    containerPort: 13133
    servicePort: 13133


helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts
helm repo update

helm repo update

helm install otel-collector open-telemetry/opentelemetry-collector -f otel-values.yaml --namespace jaeger 





###########Nginx Ingress Conrtroller Setup###############

Made my api-gateway and frontend service as ClusterIP. 

frontend service :  script.js  const API = "/api";


kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.1/deploy/static/provider/baremetal/deploy.yaml

kubectl get pods -n ingress-nginx
kubectl get svc -n ingress-nginx 


ingress_gateway.yaml

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: cafe-ingress
  namespace: default
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  rules:
    - host: 172.16.51.60.nip.io
      http:
        paths:
          - path: /()(.*)
            pathType: Prefix
            backend:
              service:
                name: frontend
                port:
                  number: 80

          - path: /api(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: api-gateway
                port:
                  number: 8000


kubectl apply -f ingress_gateway.yaml 

kubectl get ingress  



############### Setup Loki for Log Analytics###############


helm repo add grafana https://grafana.github.io/helm-charts

helm repo update 

helm upgrade --install loki grafana/loki-stack \
  --namespace loki --create-namespace \
  --set loki.enabled=true \
  --set loki.persistence.enabled=false \
  --set grafana.enabled=false \
  --set promtail.enabled=false

kubect edit sts loki -n loki




helm install promtail grafana/promtail \
  --namespace loki --create-namespace \
  --set "loki.serviceName=loki" \
  --set "loki.servicePort=3100" \
  --set "config.clients[0].url=http://loki:3100/loki/api/v1/push"


kubectl logs -n loki -l app.kubernetes.io/name=promtail



###### Instal istiod Service Mesh and Kiali##################



curl -L https://istio.io/downloadIstio | sh -

cd istio-*
export PATH=$PWD/bin:$PATH
istioctl install --set profile=demo -y

kubectl label namespace default istio-injection=enabled


kubectl rollout restart deployment -n default


To check for istio-proxy side car: 
kubectl get pods -n default -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{range .spec.containers[*]}{.name}{" "}{end}{"\n"}' 


To install Kiali, graphana, prometheus, jaeger and loki

cd smaples/addons

kubectl apply -f *


   



